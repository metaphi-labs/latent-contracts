package messages

import (
	"fmt"
)

// ToolCall represents a request to execute a tool
// Purpose: Standardize tool invocation from agents to Platform API
// This is the contract for what an agent sends when it wants to execute a tool
type ToolCall struct {
	// The tool call reference - this is THE reference that ties everything together
	// Generated by the agent, preserved throughout execution, returned in ToolResultMessage
	Ref string `json:"ref"` // e.g., "step_1", "tool_1", "call_xyz"

	// Tool identification
	Name string `json:"name"` // Tool name from registry

	// Execution parameters
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// Conversation context
	ConversationID string `json:"conversationId"`
	UserID         string `json:"userId"`
	MessageID      string `json:"messageId,omitempty"` // Assistant message that contains this call
}

// Validate ensures the tool call is well-formed
func (tc *ToolCall) Validate() error {
	if tc.Ref == "" {
		return fmt.Errorf("tool call ref is required")
	}
	if tc.Name == "" {
		return fmt.Errorf("tool name is required")
	}
	if tc.ConversationID == "" {
		return fmt.Errorf("conversationId is required")
	}
	if tc.UserID == "" {
		return fmt.Errorf("userId is required")
	}
	return nil
}